// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class CreateAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreateAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreateAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreateAuction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CreateAuction | null {
    return changetype<CreateAuction | null>(
      store.get_in_block("CreateAuction", id)
    );
  }

  static load(id: string): CreateAuction | null {
    return changetype<CreateAuction | null>(store.get("CreateAuction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): Bytes | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set manager(value: Bytes | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromBytes(<Bytes>value));
    }
  }

  get newAuction(): Bytes | null {
    let value = this.get("newAuction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set newAuction(value: Bytes | null) {
    if (!value) {
      this.unset("newAuction");
    } else {
      this.set("newAuction", Value.fromBytes(<Bytes>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get maxOffer(): BigInt | null {
    let value = this.get("maxOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxOffer(value: BigInt | null) {
    if (!value) {
      this.unset("maxOffer");
    } else {
      this.set("maxOffer", Value.fromBigInt(<BigInt>value));
    }
  }

  get submissionDeadline(): BigInt | null {
    let value = this.get("submissionDeadline");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set submissionDeadline(value: BigInt | null) {
    if (!value) {
      this.unset("submissionDeadline");
    } else {
      this.set("submissionDeadline", Value.fromBigInt(<BigInt>value));
    }
  }

  get startDate(): BigInt | null {
    let value = this.get("startDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set startDate(value: BigInt | null) {
    if (!value) {
      this.unset("startDate");
    } else {
      this.set("startDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt | null {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset("endDate");
    } else {
      this.set("endDate", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class FinalizeAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FinalizeAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FinalizeAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FinalizeAuction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FinalizeAuction | null {
    return changetype<FinalizeAuction | null>(
      store.get_in_block("FinalizeAuction", id)
    );
  }

  static load(id: string): FinalizeAuction | null {
    return changetype<FinalizeAuction | null>(store.get("FinalizeAuction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): Bytes | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set manager(value: Bytes | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromBytes(<Bytes>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get maxOffer(): BigInt | null {
    let value = this.get("maxOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxOffer(value: BigInt | null) {
    if (!value) {
      this.unset("maxOffer");
    } else {
      this.set("maxOffer", Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt | null {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset("endDate");
    } else {
      this.set("endDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get bidder(): Bytes | null {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes | null) {
    if (!value) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromBytes(<Bytes>value));
    }
  }

  get winningBid(): BigInt | null {
    let value = this.get("winningBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningBid(value: BigInt | null) {
    if (!value) {
      this.unset("winningBid");
    } else {
      this.set("winningBid", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class CancelAuction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CancelAuction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CancelAuction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CancelAuction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CancelAuction | null {
    return changetype<CancelAuction | null>(
      store.get_in_block("CancelAuction", id)
    );
  }

  static load(id: string): CancelAuction | null {
    return changetype<CancelAuction | null>(store.get("CancelAuction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get manager(): Bytes | null {
    let value = this.get("manager");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set manager(value: Bytes | null) {
    if (!value) {
      this.unset("manager");
    } else {
      this.set("manager", Value.fromBytes(<Bytes>value));
    }
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get maxOffer(): BigInt | null {
    let value = this.get("maxOffer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxOffer(value: BigInt | null) {
    if (!value) {
      this.unset("maxOffer");
    } else {
      this.set("maxOffer", Value.fromBigInt(<BigInt>value));
    }
  }

  get endDate(): BigInt | null {
    let value = this.get("endDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set endDate(value: BigInt | null) {
    if (!value) {
      this.unset("endDate");
    } else {
      this.set("endDate", Value.fromBigInt(<BigInt>value));
    }
  }

  get bidder(): Bytes | null {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes | null) {
    if (!value) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromBytes(<Bytes>value));
    }
  }

  get winningBid(): BigInt | null {
    let value = this.get("winningBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set winningBid(value: BigInt | null) {
    if (!value) {
      this.unset("winningBid");
    } else {
      this.set("winningBid", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class PlaceBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PlaceBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PlaceBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PlaceBid", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PlaceBid | null {
    return changetype<PlaceBid | null>(store.get_in_block("PlaceBid", id));
  }

  static load(id: string): PlaceBid | null {
    return changetype<PlaceBid | null>(store.get("PlaceBid", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer(): BigInt | null {
    let value = this.get("offer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set offer(value: BigInt | null) {
    if (!value) {
      this.unset("offer");
    } else {
      this.set("offer", Value.fromBigInt(<BigInt>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }
}

export class CancelBid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CancelBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CancelBid must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CancelBid", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CancelBid | null {
    return changetype<CancelBid | null>(store.get_in_block("CancelBid", id));
  }

  static load(id: string): CancelBid | null {
    return changetype<CancelBid | null>(store.get("CancelBid", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get offer(): BigInt | null {
    let value = this.get("offer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set offer(value: BigInt | null) {
    if (!value) {
      this.unset("offer");
    } else {
      this.set("offer", Value.fromBigInt(<BigInt>value));
    }
  }

  get bidder(): Bytes {
    let value = this.get("bidder");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bidder(value: Bytes) {
    this.set("bidder", Value.fromBytes(value));
  }
}
